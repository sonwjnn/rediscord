// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Statuses {
  ONLINE
  IDLE
  DND
  OFFLINE
  MOBILE
}

enum CleaningDelay {
  FOUR_HOURS
  ONE_HOUR
  THIRTY_MINUTE
  DO_NOT_CLEAN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  image                 String?                @db.Text
  bio                   String?                @db.Text
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  status                Statuses               @default(ONLINE)
  cleaningDelay         CleaningDelay          @default(DO_NOT_CLEAN)

  servers  Server[]
  members  Member[]
  channels Channel[]

  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("UserOne")
  conversationsReceived  Conversation[] @relation("UserTwo")

  hiddenConversationsBy HiddenConversation[] @relation("HiddenBy")
  hiddenConversationsUsers HiddenConversation[] @relation("HiddenUser")

  friendsInitiated Friend[] @relation("FriendOne")
  friendsReceived  Friend[] @relation("FriendTwo")

  requesting  Request[] @relation("Requesting")
  requestedBy Request[] @relation("RequestedBy")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @db.Text
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String   @db.Text
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String   @db.Text
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Server {
  id         String @id @default(uuid())
  name       String
  image      String @db.Text
  inviteCode String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  userOneId String
  userOne   User @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo   User @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]
  hiddenConversations HiddenConversation[]

  @@unique([userOneId, userTwoId])
  @@index([userTwoId])
}

model HiddenConversation {
  id String @id @default(uuid())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  userId String
  user User @relation("HiddenBy", fields: [userId], references: [id], onDelete: Cascade)

  hiddenUserId String
  hiddenUser   User @relation("HiddenUser", fields: [hiddenUserId], references: [id], onDelete: Cascade)

  isActive Boolean
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([conversationId])
}

model Friend {
  id String @id @default(cuid())

  userOneId String
  userOne   User   @relation(name: "FriendOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo   User   @relation(name: "FriendTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  @@unique([userOneId, userTwoId])
  @@index([userTwoId])
}

model Request {
  id String @id @default(cuid())

  userOneId String
  userOne   User   @relation(name: "Requesting", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo   User   @relation(name: "RequestedBy", fields: [userTwoId], references: [id], onDelete: Cascade)

  @@unique([userOneId, userTwoId])
  @@index([userTwoId])
}

model Block {
  id        String @id @default(cuid())
  blockerId String
  blockedId String
  blocker   User   @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User   @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
